{
    "microservices" : [
      {
        "microserviceID": "",
        "microservice_name": "postgres",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 200,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 600,
        "code": "docker.io/t9k4b5ndjok1/ffd:postgres",
        "state": "",
        "port": "5432",
        "addresses": {
          "rr_ip": "10.30.10.01"
        },
        "environment":[
          "POSTGRES_USER=postgres",
          "POSTGRES_PASSWORD=postgres"
        ]
      },
      {
        "microserviceID": "",
        "microservice_name": "minio",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 200,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 600,
        "code": "docker.io/t9k4b5ndjok1/ffd:minio",
        "state": "",
        "port": "9000;9001",
        "addresses": {
          "rr_ip": "10.30.10.02"
        },
        "environment":[
          "MINIO_ROOT_USER=minio",
          "MINIO_ROOT_PASSWORD=minio123"
        ]
      },
      {
        "microserviceID": "",
        "microservice_name": "mlflow",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 300,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 200,
        "code": "docker.io/t9k4b5ndjok1/ffd:mlflow",
        "state": "",
        "port": "5000",
        "addresses": {
          "rr_ip": "10.30.10.03"
        },
        "environment":[
          "POSTGRES_USER=postgres",
          "POSTGRES_PASSWORD=postgres",
          "AWS_ACCESS_KEY_ID=minio",
          "AWS_SECRET_ACCESS_KEY=minio123",
          "MLFLOW_S3_ENDPOINT_URL=http://10.30.10.02:9000",
          "MLFLOW_SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@10.30.10.01:5432/mlflow_db"
        ]
      },
      {
        "microserviceID": "",
        "microservice_name": "pushgateway",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 200,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 400,
        "code": "docker.io/prom/pushgateway:v1.7.0",
        "state": "",
        "port": "9091",
        "addresses": {
          "rr_ip": "10.30.10.04"
        }
      },
      {
        "microserviceID": "",
        "microservice_name": "prometheus",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 400,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 600,
        "code": "docker.io/t9k4b5ndjok1/ffd:prometheus",
        "state": "",
        "port": "9090",
        "addresses": {
          "rr_ip": "10.30.10.05"
        },
        "environment":[
          "PROMETHEUS_TARGET='10.30.10.05:9090'",
          "PUSHGATEWAY_TARGET='10.30.10.04:9091'",
          "CENTRAL_TARGET='10.30.10.07:7500'",
          "WORKER_TARGET='10.30.10.08:7501','10.30.10.09:7501','10.30.10.10:7501','10.30.10.11:7501','10.30.10.11:7501'"
        ]
      },
      {
        "microserviceID": "",
        "microservice_name": "grafana",
        "microservice_namespace": "stack",
        "virtualization": "container",
        "cmd": [],
        "memory": 400,
        "vcpus": 1,
        "vgpus": 0,
        "vtpus": 0,
        "bandwidth_in": 0,
        "bandwidth_out": 0,
        "storage": 200,
        "code": "docker.io/t9k4b5ndjok1/ffd:grafana",
        "state": "",
        "port": "3000",
        "addresses": {
          "rr_ip": "10.30.10.06"
        },
        "environment":[
          "PROMETHEUS_URL=http://10.30.10.05:9090"
        ]
      }
    ]
}